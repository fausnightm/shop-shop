{"version":3,"sources":["assets/spinner.gif","utils/helpers.js","utils/actions.js","components/ProductItem/index.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/OrderHistory.js","pages/Success.js","App.js","serviceWorker.js","utils/reducers.js","redux/store.js","index.js"],"names":["module","exports","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","ProductItem","item","image","name","price","quantity","state","useSelector","dispatch","useDispatch","cart","className","to","alt","src","count","pluralize","onClick","itemInCart","find","cartItem","type","purchaseQuantity","parseInt","product","QUERY_PRODUCTS","gql","QUERY_CHECKOUT","QUERY_CATEGORIES","QUERY_USER","ProductList","currentCategory","useQuery","loading","data","useEffect","products","forEach","then","length","filter","category","map","key","spinner","CategoryMenu","categories","categoryData","id","CartItem","placeholder","value","onChange","target","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","a","getCart","res","redirectToCheckout","sessionId","checkout","session","cartOpen","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","variables","i","push","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","props","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","href","logout","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","Success","addOrder","setTimeout","saveOrder","client","ApolloClient","operation","setContext","headers","authorization","uri","App","ApolloProvider","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","defaultState","reducer","action","newState","createStore","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d9fe425f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";","export function pluralize(name, count) {\n  if (count === 1) {\n    return name;\n  }\n  return name + 's';\n}\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    const request = window.indexedDB.open('shop-shop', 1);\n    let db, tx, store;\n    request.onupgradeneeded = function(e) {\n      const db = request.result;\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    request.onerror = function(e) {\n      console.log('There was an error');\n    };\n\n    request.onsuccess = function(e) {\n      db = request.result;\n      tx = db.transaction(storeName, 'readwrite');\n      store = tx.objectStore(storeName);\n\n      db.onerror = function(e) {\n        console.log('error', e);\n      };\n\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function() {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n\n      tx.oncomplete = function() {\n        db.close();\n      };\n    };\n  });\n}\n","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\n\nexport const ADD_TO_CART = \"ADD_TO_CART\";\nexport const ADD_MULTIPLE_TO_CART = \"ADD_MULTIPLE_TO_CART\";\nexport const REMOVE_FROM_CART = \"REMOVE_FROM_CART\";\nexport const CLEAR_CART = \"CLEAR_CART\";\nexport const UPDATE_CART_QUANTITY = \"UPDATE_CART_QUANTITY\";\nexport const TOGGLE_CART = \"TOGGLE_CART\";\n\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\"\n\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nfunction ProductItem(item) {\n  const {\n    image,\n    name,\n    _id,\n    price,\n    quantity\n  } = item;\n\n  const state = useSelector((state) => {\n    return state;\n  });\n  const dispatch = useDispatch();\n\n  const { cart } = state;\n\n  const addToCart = () => {\n    // check for a matching item in the cart\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id);\n\n    // if there is a match, use UPDATE and update the purchase quantity, otherwise use ADD; store data in IndexedDB as well\n    if(itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...item, purchaseQuantity: 1 }\n      });\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\n    }\n  };\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img\n          alt={name}\n          src={`/images/${image}`}\n        />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\n        <span>${price}</span>\n      </div>\n      <button onClick={addToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;\n","import gql from 'graphql-tag';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($products: [ID]!) {\n    checkout(products: $products) {\n      session\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n{\n  categories {\n    _id\n    name\n  }\n}\n`;\n\nexport const QUERY_USER = gql`\n{\n  user {\n    firstName\n    lastName\n    orders {\n      _id\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        image\n      }\n    }\n  }\n}\n`;","import React, { useEffect } from \"react\";\nimport { useQuery } from '@apollo/react-hooks';\n\nimport ProductItem from \"../ProductItem\";\nimport { QUERY_PRODUCTS } from \"../../utils/queries\";\nimport spinner from \"../../assets/spinner.gif\"\n\nimport { UPDATE_PRODUCTS } from \"../../utils/actions\";\n\nimport { idbPromise } from \"../../utils/helpers\";\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nfunction ProductList() {\n\n  const state = useSelector((state) => {\n    return state;\n  });\n  const dispatch = useDispatch();\n\n  const { currentCategory } = state;\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  useEffect(() => {\n    // when there is data to be stored\n    if (data) {\n      // store in the global state object\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n      // and store it in IndexedDB\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    } else if (!loading) {\n      // if loading is undefined, the user is offline - get data from the `products` store in IndexedDB\n      idbPromise('products', 'get').then((products) => {\n        // use the IndexedDB data to set the global state for offline browsing\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(product => product.category._id === currentCategory);\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n            {filterProducts().map(product => (\n                <ProductItem\n                  key= {product._id}\n                  _id={product._id}\n                  image={product.image}\n                  name={product.name}\n                  price={product.price}\n                  quantity={product.quantity}\n                />\n            ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      { loading ? \n      <img src={spinner} alt=\"loading\" />: null}\n    </div>\n  );\n}\n\nexport default ProductList;\n","import React, { useEffect } from \"react\";\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\nimport { useDispatch, useSelector } from 'react-redux';\n\nfunction CategoryMenu() {\n  const state = useSelector((state) => {\n    return state;\n  });\n  const dispatch = useDispatch();\n\n  const { categories } = state;\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  // Update the state with the categories upon page load or change\n  useEffect(() => {\n    // if categoryData exists or has changed from the response of useQuery, then run dispatch to update the state with the UPDATE_CATEGORIES action\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n    // also store the category data in IndexedDB\n    categoryData.categories.forEach(category => {\n      idbPromise('categories', 'put', category);\n    });\n    } else if (!loading) {\n      // if the user is offline, load data from IndexedDB\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch])\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map(item => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n","import React from 'react';\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\nimport { useDispatch } from 'react-redux';\n\nconst CartItem = ({ item }) => {\n    // const state = useSelector((state) => {\n    //     return state;\n    // });\n    const dispatch = useDispatch();\n\n    const removeFromCart = item => {\n        dispatch({\n            type: REMOVE_FROM_CART,\n            _id: item._id\n        });\n        // also update IndexedDB\n        idbPromise('cart', 'delete', {...item});\n    };\n\n    const onChange = (e) => {\n        const value = e.target.value;\n        if (value === '0') {\n            dispatch({\n                type: REMOVE_FROM_CART,\n                _id: item._id\n            });\n            idbPromise('cart', 'delete', {...item});\n        } else {\n            dispatch({\n                type: UPDATE_CART_QUANTITY,\n                _id: item._id,\n                purchaseQuantity: parseInt(value)\n            });\n            idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\n        }\n    };\n\n    return (\n        <div className=\"flex-row\">\n            <div>\n                <img src = {`/images/${item.image}`} alt = \"\" />\n            </div>\n            <div>\n                <div>{item.name}, ${item.price}</div>\n                <div>\n                    <span>Qty:</span>\n                    <input \n                        type = \"number\"\n                        placeholder = \"1\"\n                        value={item.purchaseQuantity}\n                        onChange={onChange}\n                    />\n                    <span\n                        role=\"img\"\n                        aria-label=\"trash\"\n                        onClick={() => removeFromCart(item)}\n                    >\n                        🗑️\n                    </span>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default CartItem;","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useEffect } from 'react';\nimport CartItem from '../CartItem';\nimport Auth from '../../utils/auth';\nimport './style.css';\n\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\nimport { QUERY_CHECKOUT } from '../../utils/queries';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useLazyQuery } from '@apollo/react-hooks';\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx')\n\nconst Cart = () => {\n    const state = useSelector((state) => {\n        return state;\n    });\n    const dispatch = useDispatch();\n\n    const[getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n    useEffect(() => {\n        // async function to get data from IndexedDB\n        async function getCart() {\n            const cart = await idbPromise('cart', 'get');\n            dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\n        };\n        // check global state for any cart products, and if not, use function to retrieve data from the IndexedDB store\n        if (!state.cart.length) {\n            getCart();\n        }\n    }, [state.cart.length, dispatch]);\n\n    useEffect(() => {\n        if(data) {\n            stripePromise.then((res) => {\n                res.redirectToCheckout({ sessionId: data.checkout.session })\n            });\n        }\n    }, [data]);\n\n    function toggleCart() {\n        dispatch({ type: TOGGLE_CART });\n    }\n\n    if (!state.cartOpen) {\n        return (\n            <div className=\"cart-closed\" onClick={toggleCart}>\n                <span role=\"img\" aria-label=\"cart\">🛒</span>\n            </div>\n        )\n    }\n\n    function calculateTotal() {\n        let sum = 0;\n        state.cart.forEach(item => {\n            sum += item.price * item.purchaseQuantity;\n        });\n        return sum.toFixed(2);\n    }\n\n    function submitCheckout() {\n        const productIds = [];\n\n        getCheckout({\n            variables: { products: productIds }\n        });\n\n        state.cart.forEach((item) => {\n            for (let i = 0; i < item.purchaseQuantity; i++) {\n                productIds.push(item._id)\n            }\n        });\n    }\n\n    return (\n        <div className=\"cart\">\n            <div className=\"close\" onClick={toggleCart}>[close]</div>\n            <h2>Shopping Cart</h2>\n            {state.cart.length ? (\n                <div>\n                {state.cart.map(item => (\n                    <CartItem key={item._id} item={item} />\n                ))}\n                <div className=\"flex-row space-between\">\n                    <strong>Total: ${calculateTotal()}</strong>\n                    {\n                    Auth.loggedIn() ?\n                        <button onClick={submitCheckout}>\n                        Checkout\n                        </button>\n                        :\n                        <span>(log in to check out)</span>\n                    }\n                </div>\n                </div>\n            ) : (\n                <h3>\n                <span role=\"img\" aria-label=\"shocked\">\n                    😱\n                </span>\n                You haven't added anything to your cart yet!\n                </h3>\n            )}\n        </div>\n    );\n};\n\nexport default Cart;","import React from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from \"../components/Cart\";\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <CategoryMenu />\n      <ProductList />\n      <Cart />\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { useQuery } from '@apollo/react-hooks';\n\nimport { QUERY_PRODUCTS } from \"../utils/queries\";\nimport spinner from '../assets/spinner.gif'\n\nimport { UPDATE_PRODUCTS, REMOVE_FROM_CART, UPDATE_CART_QUANTITY, ADD_TO_CART } from '../utils/actions';\n\nimport Cart from \"../components/Cart\";\n\nimport { idbPromise } from \"../utils/helpers\";\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nfunction Detail() {\n  const state = useSelector((state) => {\n    return state;\n  });\n  const dispatch = useDispatch();\n  const { id } = useParams();\n  \n  const [currentProduct, setCurrentProduct] = useState({})\n  \n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n  \n  const { products, cart } = state;\n  \n  useEffect(() => {\n    // data already in the global state\n    if (products.length) {\n      setCurrentProduct(products.find(product => product._id === id));\n    } else if (data) {\n      // retrieve data from the server\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n      // and store that data in IndexedDB\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    // if the user is offline, use the cached data in IndexedDB\n    } else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id);\n\n    // if the product is already in the cart, update the quantity instead of adding duplicate items\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      // and also store in IndexedDB\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    // if the product is not yet in the cart, add it\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 }\n      });\n      // and also store in IndexedDB\n      idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n    }\n  };\n\n  const removeFromCart = () => {\n    // remove the product from the cart\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id\n    });\n    // update IndexedDB to reflect the deleted product\n    idbPromise('cart', 'delete', { ...currentProduct })\n  };\n\n  return (\n    <>\n      {currentProduct ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">\n            ← Back to Products\n          </Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>\n            {currentProduct.description}\n          </p>\n\n          <p>\n            <strong>Price:</strong>\n            ${currentProduct.price}\n            {\" \"}\n            <button onClick={addToCart}>\n              Add to Cart\n            </button>\n            <button \n              disabled={!cart.find(p => p._id === currentProduct._id)} \n              onClick={removeFromCart}\n            >\n              Remove from Cart\n            </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {\n        loading ? <img src={spinner} alt=\"loading\" /> : null\n      }\n      <Cart />\n    </>\n  );\n};\n\nexport default Detail;\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import gql from 'graphql-tag';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      } \n      }\n    }\n  }\n`;\n\n\nexport const ADD_USER = gql`\n  mutation addUser($firstName: String!, $lastName: String!, $email: String!, $password: String!) {\n    addUser(firstName: $firstName, lastName: $lastName, email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;","import React, { useState } from \"react\";\nimport { useMutation } from '@apollo/react-hooks';\nimport { Link } from \"react-router-dom\";\nimport { LOGIN } from \"../utils/mutations\"\nimport Auth from \"../utils/auth\";\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' })\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({ variables: { email: formState.email, password: formState.password } })\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e)\n    }\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">\n        ← Go to Signup\n      </Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {\n          error ? <div>\n            <p className=\"error-text\" >The provided credentials are incorrect</p>\n          </div> : null\n        }\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\n\nexport default Login;\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useMutation } from '@apollo/react-hooks';\nimport Auth from \"../utils/auth\";\nimport { ADD_USER } from \"../utils/mutations\";\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email, password: formState.password,\n        firstName: formState.firstName, lastName: formState.lastName\n      }\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">\n        ← Go to Login\n      </Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n\n}\n\nexport default Signup;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n          -Shop-Shop\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_USER } from \"../utils/queries\";\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">\n          ← Back to Products\n          </Link>\n\n        {user ? (\n          <>\n            <h2>Order History for {user.firstName} {user.lastName}</h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>{new Date(parseInt(order.purchaseDate)).toLocaleDateString()}</h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img\n                          alt={name}\n                          src={`/images/${image}`}\n                        />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n\n      </div>\n\n    </>)\n\n};\n\nexport default OrderHistory;\n","import React, { useEffect } from \"react\";\nimport { useMutation } from '@apollo/react-hooks';\nimport Jumbotron from '../components/Jumbotron';\nimport { ADD_ORDER } from '../utils/mutations';\nimport { idbPromise } from \"../utils/helpers\";\n\nfunction Success() {\n    const [addOrder] = useMutation(ADD_ORDER);\n\n    useEffect(() => {\n        async function saveOrder() {\n            const cart = await idbPromise('cart', 'get');\n            const products = cart.map(item => item._id);\n\n            if (products.length) {\n                const { data } = await addOrder({ variables: { products } });\n                const productData = data.addOrder.products;\n                productData.forEach((item) => {\n                    idbPromise('cart', 'delete', item);\n                });\n            }\n\n            setTimeout(() => {\n                window.location.assign('/')\n            }, 3000)\n        }\n\n        saveOrder();\n    }, [addOrder]);\n\n    return (\n        <div>\n            <Jumbotron>\n                <h1>Success!</h1>\n                <h2>\n                    Thank you for your purchase!\n                </h2>\n                <h2>\n                    You will now be redirected to the homepage.\n                </h2>\n            </Jumbotron>\n        </div>\n    );\n};\n\nexport default Success;","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\n\nimport Home from \"./pages/Home\";\nimport Detail from \"./pages/Detail\";\nimport NoMatch from \"./pages/NoMatch\";\nimport Login from \"./pages/Login\";\nimport Signup from \"./pages/Signup\";\nimport Nav from \"./components/Nav\";\nimport OrderHistory from \"./pages/OrderHistory\";\nimport Success from \"./pages/Success\";\n\nconst client = new ApolloClient({\n  request: (operation) => {\n    const token = localStorage.getItem('id_token')\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : ''\n      }\n    })\n  },\n  uri: '/graphql',\n})\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n            <Nav />\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\n              <Route exact path=\"/products/:id\" component={Detail} />\n              <Route exact path=\"/success\" component={Success} />\n              <Route component={NoMatch} />\n            </Switch>\n        </div>\n      </Router>\n    </ApolloProvider>\n\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// import actions\nimport {\n  UPDATE_PRODUCTS,\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n  ADD_TO_CART,\n  ADD_MULTIPLE_TO_CART,\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  CLEAR_CART,\n  TOGGLE_CART\n} from './actions';\n\n// Set default state  \nconst defaultState = {\n  products: [],\n  categories: [],\n  currentCategory: '',\n  cart: [],\n  cartOpen: false\n}\n\n// Root reducer\nconst reducer = (state=defaultState, action) => {\n  switch (action.type) {\n      // if the action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n      case UPDATE_PRODUCTS:\n          return {\n              ...state,\n              products: [...action.products],\n          };\n      // if the action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\n      case UPDATE_CATEGORIES:\n          return {\n              ...state,\n              categories: [...action.categories]\n          };\n      // if the action type value is the value of `UPDATE_CURRENT_CATEGORY`, return a new state object with an updated currentCategory value\n      case UPDATE_CURRENT_CATEGORY:\n          return {\n              ...state,\n              currentCategory: action.currentCategory\n          };\n      // if the action type is ADD_TO_CART, return a new state object with the updated cart object\n      case ADD_TO_CART:\n          return {\n            ...state,\n            cartOpen: true,\n            cart: [...state.cart, action.product]  \n          };\n      // if the action type is ADD_MULTIPLE_TO_CART, return a new state object with the updated cart object\n      case ADD_MULTIPLE_TO_CART:\n          return {\n              ...state,\n              cart: [...state.cart, ...action.products]\n          };\n      // if the action type is REMOVE_FROM_CART, return a new state object with the updated cart and close the cart if last item is removed\n      case REMOVE_FROM_CART:\n          let newState = state.cart.filter(product => {\n              return product._id !== action._id;\n          });\n          \n          return {\n              ...state,\n              cartOpen: newState.length > 0,\n              cart: newState\n          };\n      // if the action type is UPDATE_CART_QUANTITY, return a new state object with the updated cart, updating only the quantity of the specified\n      // product ID and returning product for unchanged products\n      case UPDATE_CART_QUANTITY:\n          return {\n              ...state,\n              cartOpen: true,\n              cart: state.cart.map(product => {\n                  if (action._id === product._id) {\n                      product.purchaseQuantity = action.purchaseQuantity;\n                  }\n                  return product;\n              })\n          };\n      // if the action type is CLEAR_CART, return a new state object with the cart emptied and closed\n      case CLEAR_CART:\n          return {\n              ...state,\n              cartOpen: false,\n              cart: []\n          };\n      // if the action type is TOGGLE_CART, return a new state object with the cartOpen property toggled\n      case TOGGLE_CART:\n          return {\n              ...state,\n              cartOpen: !state.cartOpen\n          };\n      // if it's none of these actions, do not update the state and just return the current state\n      default:\n          return state;\n  }\n};\n\nexport default reducer;","import { createStore } from 'redux';\nimport reducer from '../utils/reducers';\n\nconst store = createStore(reducer);\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store = {store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}